#!/usr/bin/env bash
set -e
set -x

# parameter $1 is the project list file generated by the baseline_history.sh script
if [ "${1}X" == "X" ] ; then
    project_revisions="HMI_devel~0510-1_@@@HMI_devel~init
    HMI_devel~0510-1_1_20060314@@@HMI_devel~0510-1_
    HMI_devel~0510-3_1_20060331@@@HMI_devel~0510-1_1_20060314
    HMI_devel~0510-3_1_20060403@@@HMI_devel~0510-3_1_20060331
    HMI_devel~BES-HMI-SWxxx0612-1.1@@@HMI_devel~0510-3_1_20060403
    "
else
    export project_revisions=`cat ${1}`
fi


export repo_name="me"
export repo_init_tag="init"
export repo_submodules="bes2 make2"

export gitrepo_project_original="scarp"
export gitrepo_project_submodule="scars"

#initialize repo
if [ ! -e ${repo_name} ] ; then
    git clone --recursive ssh://git@dtdkcphlx0231.md-man.biz:7998/${gitrepo_project_submodule}/${repo_name}.git
    cd ${repo_name}
    git reset --hard ${repo_init_tag}
    for repo_submodule in ${repo_submodules}; do
        git submodule add --force ssh://git@dtdkcphlx0231.md-man.biz:7998/${gitrepo_project_original}/${repo_submodule}.git
        cd ${repo_submodule}
        git reset --hard ${repo_init_tag}
        cd -
    done
    git add -A .
    git status
    git commit -m "$repo_init_tag"

    git tag -a -m $(git tag -l --format '%(contents)' ${repo_init_tag}) sub___${repo_init_tag}
    git reset --hard sub___${repo_init_tag}
    git clean -xffd
    pwd
    # we are still in the root repo
else
    echo "Already cloned and initialized - skip "
    pwd
    cd ${repo_name}
fi




for project_revision in ${project_revisions}; do
    ccm_project_name=`echo ${project_revision} | awk -F"@@@" '{print $1}' | awk -F"~" '{print $1}'`
    repo_convert_rev_tag=`echo ${project_revision} | awk -F"@@@" '{print $1}' | awk -F"~" '{print $2}'`
    repo_baseline_rev_tag=`echo ${project_revision} | awk -F"@@@" '{print $2}' | awk -F"~" '{print $2}'`

    if [ `git describe sub___${repo_convert_rev_tag}` ] ; then
      continue
    fi

    git fetch --tags
    git reset --hard ${repo_convert_rev_tag}
    git clean -xffd
    git reset --soft sub___${repo_baseline_rev_tag}
    git checkout HEAD .gitmodules

    for repo_submodule in ${repo_submodules}; do
        git checkout HEAD ${repo_submodule}

        cd ${repo_submodule}
        git fetch --tags
        repo_submodule_rev=`ccm query "hierarchy_project_members('${ccm_project_name}~$(echo ${repo_convert_rev_tag} | sed -e 's/xxx/ /g'):project:1',none) and name ='${repo_submodule}'" -u -f "%version" | sed -e 's/ /xxx/g'`
        if [ `git describe ${repo_submodule_rev}`  ] ; then
            git reset --hard ${repo_submodule_rev}
        else
            cd $(dirname $0)
            ./baseline_history_get_root.sh "${repo_submodule}~$(echo ${repo_submodule_rev} | sed -e 's/xxx/ /g')"
            exit 1
        fi
        git clean -xffd

        if [ "${repo_convert_rev_tag}X" != "${repo_submodule_rev}X" ] ; then
           git tag -f -a -m `git tag -l --format '%(contents)' ${repo_submodule_rev}` sub___${repo_convert_rev_tag}
           git push origin -f --tag sub___${repo_convert_rev_tag}
        fi

        repo_submodule_rev=""
        cd -

    done

    git status
    git add -A .
    git status
    git commit -C ${repo_convert_rev_tag} || ( echo "Empty commit.." )
    git tag -a -m `git tag -l --format '%(contents)' ${repo_convert_rev_tag}` sub___${repo_convert_rev_tag}
    git push origin --tags
done